/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
 *
 * @author Albertaco
 */
public class VentanaPaint extends javax.swing.JFrame {
    //Variable tipo imagen-buffer que sera la que ponga en el lienzo 
    BufferedImage buffer = null;
    
    
    
    //Este es el constructor
    public VentanaPaint() {
        initComponents();
        inicializaBuffers();
    }

    private void inicializaBuffers(){
        //Creo una imagen del mismo ancho y alto que el lienzo. 
        //Tengo que castearlo para pasar de imagen a buffered imagen
        buffer = (BufferedImage)lienzo.createImage(lienzo.getWidth(), lienzo.getHeight());

        //Creo un trozo de la memoria en el que puedo hacer cosas (Imagen modificable: me permite trabajar sobre la imagen del buffer)
        Graphics2D g2 = buffer.createGraphics();

        //Dibujo un rectangulo blanco del tamaño del lienzo
        g2.setColor(Color.white);
        g2.fillRect(0,0, lienzo.getWidth(), lienzo.getHeight());

        //Apuntamos al lienzo desde g2
        g2 = (Graphics2D) lienzo.getGraphics();

        //Dibujo el buffer en la coordenada 0,0 del lienzo
        g2.drawImage(buffer, 0, 0, null);
        
    }
    //Sobreescribo el metodo paint() ya existente en Java. Para ello uso la instruccion @override
    @Override
    public void paint(Graphics g){
        //Este super ejecuta el codigo del metodo paint de la clase superior. Me garantiza que el paint funciona
        //como funcionaba hasta ahora y además le añado el codigo mio.
        super.paint(g);
        
        //Cojo lo que tiene el buffer y lo pinto en el JPanel
        Graphics2D g2 =(Graphics2D) lienzo.getGraphics();
        
        //Dibujo el buffer en la coordenada 0,0 del lienzo
        g2.drawImage(buffer, 0, 0, null);
    }
    
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lienzo = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout lienzoLayout = new javax.swing.GroupLayout(lienzo);
        lienzo.setLayout(lienzoLayout);
        lienzoLayout.setHorizontalGroup(
            lienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        lienzoLayout.setVerticalGroup(
            lienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 333, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lienzo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 102, Short.MAX_VALUE)
                .addComponent(lienzo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPaint().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel lienzo;
    // End of variables declaration//GEN-END:variables
}
